"""add_action_recommendation_tables

Revision ID: a846a2559ecc
Revises: 3509076f29a9
Create Date: 2025-10-31 16:08:07.052516

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a846a2559ecc'
down_revision = '3509076f29a9'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_actions_priority', table_name='user_actions')
    op.drop_index('idx_user_actions_status', table_name='user_actions')
    op.drop_table('user_actions')
    op.drop_index('ix_alert_outcomes_competitor_name', table_name='alert_outcomes')
    op.drop_index('ix_alert_outcomes_id', table_name='alert_outcomes')
    op.drop_table('alert_outcomes')
    op.drop_index('idx_research_reports_status', table_name='research_reports')
    op.drop_table('research_reports')
    op.drop_index('ix_playbook_templates_id', table_name='playbook_templates')
    op.drop_table('playbook_templates')
    op.drop_index('idx_api_usage_logs_api_name', table_name='api_usage_logs')
    op.drop_index('idx_api_usage_logs_created_at', table_name='api_usage_logs')
    op.drop_table('api_usage_logs')
    op.drop_index('ix_user_playbooks_id', table_name='user_playbooks')
    op.drop_table('user_playbooks')
    op.drop_index('ix_source_evidence_id', table_name='source_evidence')
    op.drop_table('source_evidence')
    op.drop_index('ix_evidence_badges_id', table_name='evidence_badges')
    op.drop_table('evidence_badges')
    op.drop_index('ix_playbook_executions_id', table_name='playbook_executions')
    op.drop_table('playbook_executions')
    op.drop_table('soc2_audit_logs')
    op.drop_index('ix_persona_presets_id', table_name='persona_presets')
    op.drop_table('persona_presets')
    op.drop_table('security_controls')
    op.drop_index('ix_integration_logs_id', table_name='integration_logs')
    op.drop_table('integration_logs')
    op.drop_index('ix_feedback_sessions_id', table_name='feedback_sessions')
    op.drop_index('ix_feedback_sessions_user_id', table_name='feedback_sessions')
    op.drop_table('feedback_sessions')
    op.drop_index('ix_monitoring_adjustments_competitor_name', table_name='monitoring_adjustments')
    op.drop_index('ix_monitoring_adjustments_id', table_name='monitoring_adjustments')
    op.drop_table('monitoring_adjustments')
    op.drop_index('ix_learning_insights_competitor_name', table_name='learning_insights')
    op.drop_index('ix_learning_insights_id', table_name='learning_insights')
    op.drop_table('learning_insights')
    op.add_column('audit_logs', sa.Column('details', sa.JSON(), nullable=True))
    op.add_column('audit_logs', sa.Column('session_id', sa.String(), nullable=True))
    op.alter_column('audit_logs', 'resource_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'success',
               existing_type=sa.INTEGER(),
               type_=sa.Boolean(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index('idx_audit_action_time', 'audit_logs', ['action', 'created_at'], unique=False)
    op.create_index('idx_audit_ip_time', 'audit_logs', ['ip_address', 'created_at'], unique=False)
    op.create_index('idx_audit_resource_time', 'audit_logs', ['resource_type', 'resource_id', 'created_at'], unique=False)
    op.create_index('idx_audit_user_action_time', 'audit_logs', ['user_id', 'action', 'created_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_ip_address'), 'audit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_id'), 'audit_logs', ['resource_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_session_id'), 'audit_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.drop_constraint('audit_logs_workspace_id_fkey', 'audit_logs', type_='foreignkey')
    op.drop_column('audit_logs', 'workspace_id')
    op.drop_column('audit_logs', 'description')
    op.drop_column('audit_logs', 'new_values')
    op.drop_column('audit_logs', 'old_values')
    op.drop_index('idx_company_research_created', table_name='company_research')
    op.drop_index('idx_company_research_name', table_name='company_research')
    op.drop_index('idx_impact_cards_competitor_created', table_name='impact_cards')
    op.drop_index('idx_impact_cards_credibility', table_name='impact_cards')
    op.drop_index('idx_impact_cards_risk_level', table_name='impact_cards')
    op.drop_index('idx_impact_cards_watch_created', table_name='impact_cards')
    op.add_column('integrations', sa.Column('slug', sa.String(length=255), nullable=False))
    op.add_column('integrations', sa.Column('description', sa.Text(), nullable=True))
    op.add_column('integrations', sa.Column('category', sa.String(length=50), nullable=False))
    op.add_column('integrations', sa.Column('developer_id', sa.Integer(), nullable=False))
    op.add_column('integrations', sa.Column('developer_name', sa.String(length=255), nullable=True))
    op.add_column('integrations', sa.Column('developer_email', sa.String(length=255), nullable=True))
    op.add_column('integrations', sa.Column('version', sa.String(length=50), nullable=True))
    op.add_column('integrations', sa.Column('webhook_url', sa.String(length=500), nullable=True))
    op.add_column('integrations', sa.Column('configuration_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('integrations', sa.Column('required_permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('integrations', sa.Column('status', sa.String(length=50), nullable=True))
    op.add_column('integrations', sa.Column('is_featured', sa.Boolean(), nullable=True))
    op.add_column('integrations', sa.Column('install_count', sa.Integer(), nullable=True))
    op.add_column('integrations', sa.Column('rating', sa.Float(), nullable=True))
    op.add_column('integrations', sa.Column('rating_count', sa.Integer(), nullable=True))
    op.add_column('integrations', sa.Column('revenue_share_percent', sa.Float(), nullable=True))
    op.add_column('integrations', sa.Column('monthly_revenue', sa.Float(), nullable=True))
    op.add_column('integrations', sa.Column('approved_at', sa.DateTime(), nullable=True))
    op.alter_column('integrations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('integrations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.create_unique_constraint(None, 'integrations', ['slug'])
    op.drop_constraint('integrations_created_by_fkey', 'integrations', type_='foreignkey')
    op.drop_constraint('integrations_workspace_id_fkey', 'integrations', type_='foreignkey')
    op.create_foreign_key(None, 'integrations', 'users', ['developer_id'], ['id'])
    op.drop_column('integrations', 'credentials')
    op.drop_column('integrations', 'is_verified')
    op.drop_column('integrations', 'last_sync_at')
    op.drop_column('integrations', 'successful_syncs')
    op.drop_column('integrations', 'type')
    op.drop_column('integrations', 'is_active')
    op.drop_column('integrations', 'failed_syncs')
    op.drop_column('integrations', 'workspace_id')
    op.drop_column('integrations', 'total_syncs')
    op.drop_column('integrations', 'created_by')
    op.drop_column('integrations', 'config')
    op.drop_column('integrations', 'last_error')
    op.add_column('users', sa.Column('consent_marketing', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('consent_analytics', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('consent_integrations', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('data_retention_days', sa.Integer(), nullable=True))
    op.drop_index('idx_watch_items_active', table_name='watch_items')
    op.drop_index('idx_watch_items_created', table_name='watch_items')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index('idx_watch_items_created', 'watch_items', [sa.text('created_at DESC')], unique=False)
    op.create_index('idx_watch_items_active', 'watch_items', ['is_active'], unique=False)
    op.drop_column('users', 'data_retention_days')
    op.drop_column('users', 'consent_integrations')
    op.drop_column('users', 'consent_analytics')
    op.drop_column('users', 'consent_marketing')
    op.add_column('integrations', sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('integrations', sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('integrations', sa.Column('total_syncs', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('workspace_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('integrations', sa.Column('failed_syncs', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('type', postgresql.ENUM('SLACK', 'NOTION', 'SALESFORCE', 'MICROSOFT_TEAMS', 'JIRA', 'WEBHOOK', name='integrationtype'), autoincrement=False, nullable=False))
    op.add_column('integrations', sa.Column('successful_syncs', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('last_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('integrations', sa.Column('credentials', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'integrations', type_='foreignkey')
    op.create_foreign_key('integrations_workspace_id_fkey', 'integrations', 'workspaces', ['workspace_id'], ['id'])
    op.create_foreign_key('integrations_created_by_fkey', 'integrations', 'users', ['created_by'], ['id'])
    op.drop_constraint(None, 'integrations', type_='unique')
    op.alter_column('integrations', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('integrations', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('integrations', 'approved_at')
    op.drop_column('integrations', 'monthly_revenue')
    op.drop_column('integrations', 'revenue_share_percent')
    op.drop_column('integrations', 'rating_count')
    op.drop_column('integrations', 'rating')
    op.drop_column('integrations', 'install_count')
    op.drop_column('integrations', 'is_featured')
    op.drop_column('integrations', 'status')
    op.drop_column('integrations', 'required_permissions')
    op.drop_column('integrations', 'configuration_schema')
    op.drop_column('integrations', 'webhook_url')
    op.drop_column('integrations', 'version')
    op.drop_column('integrations', 'developer_email')
    op.drop_column('integrations', 'developer_name')
    op.drop_column('integrations', 'developer_id')
    op.drop_column('integrations', 'category')
    op.drop_column('integrations', 'description')
    op.drop_column('integrations', 'slug')
    op.create_index('idx_impact_cards_watch_created', 'impact_cards', ['watch_item_id', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_impact_cards_risk_level', 'impact_cards', ['risk_level'], unique=False)
    op.create_index('idx_impact_cards_credibility', 'impact_cards', ['credibility_score'], unique=False)
    op.create_index('idx_impact_cards_competitor_created', 'impact_cards', ['competitor_name', sa.text('created_at DESC')], unique=False)
    op.create_index('idx_company_research_name', 'company_research', ['company_name'], unique=False)
    op.create_index('idx_company_research_created', 'company_research', [sa.text('created_at DESC')], unique=False)
    op.add_column('audit_logs', sa.Column('old_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('new_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('audit_logs', sa.Column('workspace_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('audit_logs_workspace_id_fkey', 'audit_logs', 'workspaces', ['workspace_id'], ['id'])
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_session_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_ip_address'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_index('idx_audit_user_action_time', table_name='audit_logs')
    op.drop_index('idx_audit_resource_time', table_name='audit_logs')
    op.drop_index('idx_audit_ip_time', table_name='audit_logs')
    op.drop_index('idx_audit_action_time', table_name='audit_logs')
    op.alter_column('audit_logs', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('audit_logs', 'success',
               existing_type=sa.Boolean(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'user_agent',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'resource_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('audit_logs', 'session_id')
    op.drop_column('audit_logs', 'details')
    op.create_table('learning_insights',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('learning_insights_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('competitor_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('insight_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('current_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('suggested_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('potential_impact', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supporting_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('applied_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('applied_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='learning_insights_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_learning_insights_id', 'learning_insights', ['id'], unique=False)
    op.create_index('ix_learning_insights_competitor_name', 'learning_insights', ['competitor_name'], unique=False)
    op.create_table('monitoring_adjustments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('competitor_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('insight_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('adjustment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('old_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('new_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('alerts_before', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('alerts_after', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quality_before', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('quality_after', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('evaluation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['insight_id'], ['learning_insights.id'], name='monitoring_adjustments_insight_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='monitoring_adjustments_pkey')
    )
    op.create_index('ix_monitoring_adjustments_id', 'monitoring_adjustments', ['id'], unique=False)
    op.create_index('ix_monitoring_adjustments_competitor_name', 'monitoring_adjustments', ['competitor_name'], unique=False)
    op.create_table('feedback_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('session_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('session_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('alerts_reviewed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('actions_taken', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('feedback_provided', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_role', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('industry', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('company_size', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='feedback_sessions_pkey')
    )
    op.create_index('ix_feedback_sessions_user_id', 'feedback_sessions', ['user_id'], unique=False)
    op.create_index('ix_feedback_sessions_id', 'feedback_sessions', ['id'], unique=False)
    op.create_table('integration_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('integration_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], name='integration_logs_integration_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='integration_logs_pkey')
    )
    op.create_index('ix_integration_logs_id', 'integration_logs', ['id'], unique=False)
    op.create_table('security_controls',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('control_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('control_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('control_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('soc2_category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('implementation_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('evidence_location', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('responsible_party', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('review_frequency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_reviewed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_tested_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_review_due', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('compliance_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='security_controls_pkey'),
    sa.UniqueConstraint('control_id', name='security_controls_control_id_key')
    )
    op.create_table('persona_presets',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('persona_presets_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('default_data_slices', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('export_templates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('follow_up_tasks', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('key_questions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority_sources', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('analysis_depth', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('dashboard_layout', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notification_preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='persona_presets_pkey'),
    sa.UniqueConstraint('name', name='persona_presets_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_persona_presets_id', 'persona_presets', ['id'], unique=False)
    op.create_table('soc2_audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resource_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='soc2_audit_logs_pkey')
    )
    op.create_table('playbook_executions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_playbook_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_company', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('execution_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('generated_artifacts', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('completion_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('completion_percentage', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_duration_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_satisfaction_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_saved_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('execution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("completion_status::text = ANY (ARRAY['in_progress'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])", name='check_completion_status'),
    sa.CheckConstraint('completion_percentage >= 0 AND completion_percentage <= 100', name='check_completion_percentage'),
    sa.ForeignKeyConstraint(['user_playbook_id'], ['user_playbooks.id'], name='playbook_executions_user_playbook_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='playbook_executions_pkey')
    )
    op.create_index('ix_playbook_executions_id', 'playbook_executions', ['id'], unique=False)
    op.create_table('evidence_badges',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('evidence_badges_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('confidence_percentage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('confidence_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('total_sources', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tier_1_sources', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tier_2_sources', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tier_3_sources', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tier_4_sources', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('freshness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('oldest_source_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('newest_source_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('average_source_age_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cross_validation_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bias_detection_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fact_check_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('top_sources', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('badge_color', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('badge_icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('display_text', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='evidence_badges_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_evidence_badges_id', 'evidence_badges', ['id'], unique=False)
    op.create_table('source_evidence',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('badge_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('source_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('source_url', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('source_tier', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('excerpt', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('publish_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('relevance_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('credibility_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('extracted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('you_api_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['badge_id'], ['evidence_badges.id'], name='source_evidence_badge_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='source_evidence_pkey')
    )
    op.create_index('ix_source_evidence_id', 'source_evidence', ['id'], unique=False)
    op.create_table('user_playbooks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('persona_preset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('custom_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('custom_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_favorite', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_tasks', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['persona_preset_id'], ['persona_presets.id'], name='user_playbooks_persona_preset_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_playbooks_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_playbooks_pkey')
    )
    op.create_index('ix_user_playbooks_id', 'user_playbooks', ['id'], unique=False)
    op.create_table('api_usage_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('api_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('cost_estimate', sa.NUMERIC(precision=10, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='api_usage_logs_pkey')
    )
    op.create_index('idx_api_usage_logs_created_at', 'api_usage_logs', ['created_at'], unique=False)
    op.create_index('idx_api_usage_logs_api_name', 'api_usage_logs', ['api_name'], unique=False)
    op.create_table('playbook_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('template_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('customization_options', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='playbook_templates_pkey')
    )
    op.create_index('ix_playbook_templates_id', 'playbook_templates', ['id'], unique=False)
    op.create_table('research_reports',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('company_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'processing'::character varying"), autoincrement=False, nullable=True),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('total_sources', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('search_results', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('research_report', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('api_usage', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='research_reports_pkey')
    )
    op.create_index('idx_research_reports_status', 'research_reports', ['status'], unique=False)
    op.create_table('alert_outcomes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('alert_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('competitor_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('action_taken', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('outcome_quality', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('user_feedback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('business_impact', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('source_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='alert_outcomes_pkey')
    )
    op.create_index('ix_alert_outcomes_id', 'alert_outcomes', ['id'], unique=False)
    op.create_index('ix_alert_outcomes_competitor_name', 'alert_outcomes', ['competitor_name'], unique=False)
    op.create_table('user_actions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'Medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'Pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('assignee', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('source', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_actions_pkey')
    )
    op.create_index('idx_user_actions_status', 'user_actions', ['status'], unique=False)
    op.create_index('idx_user_actions_priority', 'user_actions', ['priority'], unique=False)
    # ### end Alembic commands ###